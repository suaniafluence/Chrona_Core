name: Build Mobile APK

on:
  push:
    tags:
      - 'mobile-v*.*.*'  # Trigger on tags like mobile-v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      api_url:
        description: 'API URL for the build'
        required: true
        default: 'https://api.chrona.com'

jobs:
  build:
    name: Build APK with EAS
    runs-on: ubuntu-latest

    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'
          cache-dependency-path: apps/mobile/package.json

      - name: 🏗 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📦 Install dependencies
        working-directory: apps/mobile
        run: npm ci

      - name: 🔐 Setup EAS credentials (Android keystore)
        working-directory: apps/mobile
        env:
          EAS_CLI_LOG_LEVEL: debug
        run: |
          # Create credentials.json for EAS from environment
          # Note: This assumes your Expo account has credentials pre-configured
          # If not, uncomment the interactive setup below:
          # npx eas@latest credentials configure --platform android --non-interactive
          echo "Using pre-configured EAS credentials from your Expo account..."

      - name: 🔧 Configure version
        working-directory: apps/mobile
        run: |
          # Extract version from tag or use input
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION="${GITHUB_REF#refs/tags/mobile-v}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi

          echo "Building version: $VERSION"

          # Update app.json with version
          node -e "
            const fs = require('fs');
            const appJson = JSON.parse(fs.readFileSync('app.json', 'utf8'));
            appJson.expo.version = '$VERSION';

            // Auto-increment versionCode based on version
            const versionParts = '$VERSION'.split('.');
            const versionCode = parseInt(versionParts[0]) * 10000 +
                               parseInt(versionParts[1]) * 100 +
                               parseInt(versionParts[2]);
            appJson.expo.android.versionCode = versionCode;

            fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2));
            console.log('Updated version to:', appJson.expo.version);
            console.log('Updated versionCode to:', appJson.expo.android.versionCode);
          "

      - name: 🔧 Configure API URL
        working-directory: apps/mobile
        run: |
          # Use API URL from input or default to production
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            API_URL="${{ github.event.inputs.api_url }}"
          else
            API_URL="https://api.chrona.com"
          fi

          echo "Configuring API URL: $API_URL"

          # Update eas.json with API URL for both preview and production
          node -e "
            const fs = require('fs');
            const easJson = JSON.parse(fs.readFileSync('eas.json', 'utf8'));
            easJson.build.preview.env.EXPO_PUBLIC_API_URL = '$API_URL';
            easJson.build.production.env.EXPO_PUBLIC_API_URL = '$API_URL';
            fs.writeFileSync('eas.json', JSON.stringify(easJson, null, 2));
            console.log('API URL configured:', '$API_URL');
          "

      - name: 🚀 Build APK
        working-directory: apps/mobile
        run: |
          eas build --platform android --profile preview --no-wait

          # Wait for build to complete and get download URL
          echo "Waiting for build to complete..."
          BUILD_ID=$(eas build:list --platform android --limit 1 --json | jq -r '.[0].id')

          # Poll build status
          while true; do
            STATUS=$(eas build:view $BUILD_ID --json | jq -r '.status')
            echo "Build status: $STATUS"

            if [ "$STATUS" == "FINISHED" ]; then
              echo "Build completed successfully!"
              break
            elif [ "$STATUS" == "ERRORED" ] || [ "$STATUS" == "CANCELED" ]; then
              echo "Build failed with status: $STATUS"
              exit 1
            fi

            sleep 30
          done

          # Get download URL
          DOWNLOAD_URL=$(eas build:view $BUILD_ID --json | jq -r '.artifacts.buildUrl')
          echo "APK Download URL: $DOWNLOAD_URL"
          echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV

      - name: 📥 Download APK
        run: |
          wget -O chrona-mobile.apk "${{ env.DOWNLOAD_URL }}"

          # Rename with version
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION="${GITHUB_REF#refs/tags/mobile-v}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi

          mv chrona-mobile.apk chrona-mobile-v${VERSION}.apk
          echo "APK_FILE=chrona-mobile-v${VERSION}.apk" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 📊 Get APK Info
        run: |
          # Get file size
          SIZE=$(du -h "${{ env.APK_FILE }}" | cut -f1)
          echo "APK Size: $SIZE"
          echo "APK_SIZE=$SIZE" >> $GITHUB_ENV

          # Generate SHA256 checksum
          SHA256=$(sha256sum "${{ env.APK_FILE }}" | cut -d' ' -f1)
          echo "SHA256: $SHA256"
          echo "APK_SHA256=$SHA256" >> $GITHUB_ENV

      - name: 📤 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: mobile-v${{ env.VERSION }}
          name: "Chrona Mobile v${{ env.VERSION }}"
          body: |
            # 📱 Chrona Mobile - Version ${{ env.VERSION }}

            ## 📥 Installation

            ### Méthode 1: Téléchargement Direct

            1. Télécharger le fichier APK ci-dessous
            2. Ouvrir le fichier sur votre téléphone Android
            3. Autoriser l'installation depuis sources inconnues
            4. Installer l'application

            ### Méthode 2: Scanner le QR Code

            Utilisez l'outil de génération de QR code:
            ```
            apps/mobile/tools/generate-apk-qr.html
            ```

            Entrez l'URL de téléchargement:
            ```
            https://github.com/${{ github.repository }}/releases/download/mobile-v${{ env.VERSION }}/chrona-mobile-v${{ env.VERSION }}.apk
            ```

            ## 📊 Informations

            - **Taille**: ${{ env.APK_SIZE }}
            - **Package**: `com.chrona.mobile`
            - **Version Code**: Auto-généré
            - **SHA256**: `${{ env.APK_SHA256 }}`

            ## 🔐 Vérification

            Vérifier le checksum SHA256:
            ```bash
            sha256sum chrona-mobile-v${{ env.VERSION }}.apk
            ```

            ## 📚 Documentation

            - [Guide d'installation](https://github.com/${{ github.repository }}/blob/main/apps/mobile/INSTALLATION.md)
            - [Guide de build](https://github.com/${{ github.repository }}/blob/main/apps/mobile/APK_BUILD.md)

            ## 🐛 Support

            Pour toute question ou problème, ouvrez une [issue](https://github.com/${{ github.repository }}/issues).

            ---

            🤖 Build automatique généré par GitHub Actions
          files: ${{ env.APK_FILE }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 💬 Post Build Summary
        run: |
          echo "### 🎉 Build Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**APK**: ${{ env.APK_FILE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Size**: ${{ env.APK_SIZE }}" >> $GITHUB_STEP_SUMMARY
          echo "**SHA256**: \`${{ env.APK_SHA256 }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📥 **Download URL**:" >> $GITHUB_STEP_SUMMARY
          echo "https://github.com/${{ github.repository }}/releases/download/mobile-v${{ env.VERSION }}/chrona-mobile-v${{ env.VERSION }}.apk" >> $GITHUB_STEP_SUMMARY
