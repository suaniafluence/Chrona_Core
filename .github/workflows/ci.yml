name: CI

on:
  push:
    branches: [ main, ci/** ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend • Tests & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install black isort flake8

      - name: Generate JWT RS256 keys for tests
        working-directory: backend
        run: python tools/generate_keys.py

      - name: Run tests with coverage
        working-directory: backend
        env:
          PYTHONPATH: .
        run: pytest -q --cov=src --cov-report=xml

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: backend/coverage.xml
          if-no-files-found: warn

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          files: backend/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: backend
          fail_ci_if_error: false

      - name: Lint (black)
        run: black --check backend/src backend/tests

      - name: Check import sorting
        id: isort-check
        run: |
          if ! isort --profile black --check-only backend; then
            echo "need_fix=true" >> $GITHUB_OUTPUT
            exit 1
          fi
        continue-on-error: true

      - name: Lint (flake8)
        working-directory: backend
        run: flake8 src tests

  backend-docker-build:
    name: Backend • Docker build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build image (with retry)
        shell: bash
        run: |
          set -euo pipefail
          for i in 1 2 3; do
            echo "Attempt $i: docker build"
            if docker build -t chrona-backend:ci ./backend; then
              echo "Docker build succeeded on attempt $i"; break
            fi
            echo "Docker build failed on attempt $i; retrying in $((5*i))s..."
            sleep $((5*i))
          done

  frontend-checks:
    name: Frontend • Build (matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [ backoffice, kiosk ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (only if app exists)
        uses: actions/setup-node@v4
        if: ${{ hashFiles(format('apps/{0}/package.json', matrix.app)) != '' }}
        with:
          node-version: '20'

      - name: Build app (if present)
        shell: bash
        if: ${{ hashFiles(format('apps/{0}/package.json', matrix.app)) != '' }}
        run: |
          APP="${{ matrix.app }}"
          if [ -f "apps/$APP/package.json" ]; then
            cd "apps/$APP"
            npm ci
            npm run -s build || npm run -s dev -- --version || echo "No build script; dev only"
          else
            echo "No package.json in apps/$APP — skipping"
          fi

      - name: Skip notice
        if: ${{ hashFiles(format('apps/{0}/package.json', matrix.app)) == '' }}
        run: echo "Skipping ${{ matrix.app }} — no package.json present"

  security-python-deps:
    name: Security • Python Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Safety
        run: pip install safety

      - name: Run Safety check
        working-directory: backend
        run: |
          pip install -r requirements.txt
          safety check --json --output safety-report.json || true
        continue-on-error: true

      - name: Upload Safety report
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: backend/safety-report.json
          if-no-files-found: warn

  security-npm-audit:
    name: Security • NPM Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [ backoffice, kiosk, mobile ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        if: ${{ hashFiles(format('apps/{0}/package.json', matrix.app)) != '' }}
        with:
          node-version: '20'

      - name: NPM Audit
        if: ${{ hashFiles(format('apps/{0}/package.json', matrix.app)) != '' }}
        working-directory: apps/${{ matrix.app }}
        run: |
          npm audit --json > npm-audit-${{ matrix.app }}.json || true
        continue-on-error: true

      - name: Upload NPM audit report
        uses: actions/upload-artifact@v4
        if: ${{ hashFiles(format('apps/{0}/package.json', matrix.app)) != '' }}
        with:
          name: npm-audit-${{ matrix.app }}
          path: apps/${{ matrix.app }}/npm-audit-${{ matrix.app }}.json
          if-no-files-found: warn

  security-docker-scan:
    name: Security • Docker Image Scan (Trivy)
    runs-on: ubuntu-latest
    needs: backend-docker-build
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t chrona-backend:ci ./backend

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'chrona-backend:ci'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate Trivy JSON report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'chrona-backend:ci'
          format: 'json'
          output: 'trivy-report.json'

      - name: Upload Trivy JSON report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
          if-no-files-found: warn

  security-sast-semgrep:
    name: Security • SAST (Semgrep)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/javascript
            p/typescript
            p/react
          generateSarif: true

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: semgrep.sarif
          if-no-files-found: warn

  sbom-generation:
    name: Security • SBOM Generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install CycloneDX
        run: pip install cyclonedx-bom

      - name: Generate Python SBOM
        working-directory: backend
        run: |
          pip install -r requirements.txt
          cyclonedx-py requirements -r requirements.txt -o sbom-python.json --format json

      - name: Setup Node for JS SBOM
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate Mobile SBOM
        if: ${{ hashFiles('apps/mobile/package.json') != '' }}
        working-directory: apps/mobile
        run: |
          npm ci
          npx @cyclonedx/cyclonedx-npm --output-file sbom-mobile.json

      - name: Generate Kiosk SBOM
        if: ${{ hashFiles('apps/kiosk/package.json') != '' }}
        working-directory: apps/kiosk
        run: |
          npm ci
          npx @cyclonedx/cyclonedx-npm --output-file sbom-kiosk.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: |
            backend/sbom-python.json
            apps/mobile/sbom-mobile.json
            apps/kiosk/sbom-kiosk.json
          if-no-files-found: warn

  e2e-tests-playwright:
    name: E2E • Playwright Tests
    runs-on: ubuntu-latest
    needs: backend-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate JWT keys
        working-directory: backend
        run: python tools/generate_keys.py

      - name: Start backend server
        working-directory: backend
        run: |
          uvicorn src.main:app --host 0.0.0.0 --port 8000 &
          sleep 5
        env:
          PYTHONPATH: .

      - name: Setup Node for Kiosk UI
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install and start Kiosk UI
        shell: bash
        run: |
          if [ -f "apps/kiosk/package.json" ]; then
            cd apps/kiosk
            npm ci
            # Start Vite dev server in background on 0.0.0.0:5174
            npm run dev -- --host 0.0.0.0 --port 5174 &
            sleep 6
          else
            echo "No Kiosk app found; skipping UI startup"
          fi

      - name: Setup Node for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright dependencies
        working-directory: backend/tests/e2e
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: backend/tests/e2e
        env:
          API_URL: http://localhost:8000
          KIOSK_URL: http://localhost:5174
        run: npm test

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: backend/tests/e2e/playwright-report/
          if-no-files-found: warn

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            backend/tests/e2e/test-results/
          if-no-files-found: warn
